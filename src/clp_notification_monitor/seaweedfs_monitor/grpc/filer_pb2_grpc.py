# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""
Client and server classes corresponding to protobuf-defined services.
"""
import clp_notification_monitor.seaweedfs_monitor.grpc.filer_pb2 as filer__pb2
import grpc


class SeaweedFilerStub(object):
    """////////////////////////////////////////////////"""

    def __init__(self, channel):
        """
        Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.LookupDirectoryEntry = channel.unary_unary(
            "/filer_pb.SeaweedFiler/LookupDirectoryEntry",
            request_serializer=filer__pb2.LookupDirectoryEntryRequest.SerializeToString,
            response_deserializer=filer__pb2.LookupDirectoryEntryResponse.FromString,
        )
        self.ListEntries = channel.unary_stream(
            "/filer_pb.SeaweedFiler/ListEntries",
            request_serializer=filer__pb2.ListEntriesRequest.SerializeToString,
            response_deserializer=filer__pb2.ListEntriesResponse.FromString,
        )
        self.CreateEntry = channel.unary_unary(
            "/filer_pb.SeaweedFiler/CreateEntry",
            request_serializer=filer__pb2.CreateEntryRequest.SerializeToString,
            response_deserializer=filer__pb2.CreateEntryResponse.FromString,
        )
        self.UpdateEntry = channel.unary_unary(
            "/filer_pb.SeaweedFiler/UpdateEntry",
            request_serializer=filer__pb2.UpdateEntryRequest.SerializeToString,
            response_deserializer=filer__pb2.UpdateEntryResponse.FromString,
        )
        self.AppendToEntry = channel.unary_unary(
            "/filer_pb.SeaweedFiler/AppendToEntry",
            request_serializer=filer__pb2.AppendToEntryRequest.SerializeToString,
            response_deserializer=filer__pb2.AppendToEntryResponse.FromString,
        )
        self.DeleteEntry = channel.unary_unary(
            "/filer_pb.SeaweedFiler/DeleteEntry",
            request_serializer=filer__pb2.DeleteEntryRequest.SerializeToString,
            response_deserializer=filer__pb2.DeleteEntryResponse.FromString,
        )
        self.AtomicRenameEntry = channel.unary_unary(
            "/filer_pb.SeaweedFiler/AtomicRenameEntry",
            request_serializer=filer__pb2.AtomicRenameEntryRequest.SerializeToString,
            response_deserializer=filer__pb2.AtomicRenameEntryResponse.FromString,
        )
        self.StreamRenameEntry = channel.unary_stream(
            "/filer_pb.SeaweedFiler/StreamRenameEntry",
            request_serializer=filer__pb2.StreamRenameEntryRequest.SerializeToString,
            response_deserializer=filer__pb2.StreamRenameEntryResponse.FromString,
        )
        self.AssignVolume = channel.unary_unary(
            "/filer_pb.SeaweedFiler/AssignVolume",
            request_serializer=filer__pb2.AssignVolumeRequest.SerializeToString,
            response_deserializer=filer__pb2.AssignVolumeResponse.FromString,
        )
        self.LookupVolume = channel.unary_unary(
            "/filer_pb.SeaweedFiler/LookupVolume",
            request_serializer=filer__pb2.LookupVolumeRequest.SerializeToString,
            response_deserializer=filer__pb2.LookupVolumeResponse.FromString,
        )
        self.CollectionList = channel.unary_unary(
            "/filer_pb.SeaweedFiler/CollectionList",
            request_serializer=filer__pb2.CollectionListRequest.SerializeToString,
            response_deserializer=filer__pb2.CollectionListResponse.FromString,
        )
        self.DeleteCollection = channel.unary_unary(
            "/filer_pb.SeaweedFiler/DeleteCollection",
            request_serializer=filer__pb2.DeleteCollectionRequest.SerializeToString,
            response_deserializer=filer__pb2.DeleteCollectionResponse.FromString,
        )
        self.Statistics = channel.unary_unary(
            "/filer_pb.SeaweedFiler/Statistics",
            request_serializer=filer__pb2.StatisticsRequest.SerializeToString,
            response_deserializer=filer__pb2.StatisticsResponse.FromString,
        )
        self.Ping = channel.unary_unary(
            "/filer_pb.SeaweedFiler/Ping",
            request_serializer=filer__pb2.PingRequest.SerializeToString,
            response_deserializer=filer__pb2.PingResponse.FromString,
        )
        self.GetFilerConfiguration = channel.unary_unary(
            "/filer_pb.SeaweedFiler/GetFilerConfiguration",
            request_serializer=filer__pb2.GetFilerConfigurationRequest.SerializeToString,
            response_deserializer=filer__pb2.GetFilerConfigurationResponse.FromString,
        )
        self.SubscribeMetadata = channel.unary_stream(
            "/filer_pb.SeaweedFiler/SubscribeMetadata",
            request_serializer=filer__pb2.SubscribeMetadataRequest.SerializeToString,
            response_deserializer=filer__pb2.SubscribeMetadataResponse.FromString,
        )
        self.SubscribeLocalMetadata = channel.unary_stream(
            "/filer_pb.SeaweedFiler/SubscribeLocalMetadata",
            request_serializer=filer__pb2.SubscribeMetadataRequest.SerializeToString,
            response_deserializer=filer__pb2.SubscribeMetadataResponse.FromString,
        )
        self.KvGet = channel.unary_unary(
            "/filer_pb.SeaweedFiler/KvGet",
            request_serializer=filer__pb2.KvGetRequest.SerializeToString,
            response_deserializer=filer__pb2.KvGetResponse.FromString,
        )
        self.KvPut = channel.unary_unary(
            "/filer_pb.SeaweedFiler/KvPut",
            request_serializer=filer__pb2.KvPutRequest.SerializeToString,
            response_deserializer=filer__pb2.KvPutResponse.FromString,
        )
        self.CacheRemoteObjectToLocalCluster = channel.unary_unary(
            "/filer_pb.SeaweedFiler/CacheRemoteObjectToLocalCluster",
            request_serializer=filer__pb2.CacheRemoteObjectToLocalClusterRequest.SerializeToString,
            response_deserializer=filer__pb2.CacheRemoteObjectToLocalClusterResponse.FromString,
        )
        self.Lock = channel.unary_unary(
            "/filer_pb.SeaweedFiler/Lock",
            request_serializer=filer__pb2.LockRequest.SerializeToString,
            response_deserializer=filer__pb2.LockResponse.FromString,
        )
        self.Unlock = channel.unary_unary(
            "/filer_pb.SeaweedFiler/Unlock",
            request_serializer=filer__pb2.UnlockRequest.SerializeToString,
            response_deserializer=filer__pb2.UnlockResponse.FromString,
        )
        self.TransferLocks = channel.unary_unary(
            "/filer_pb.SeaweedFiler/TransferLocks",
            request_serializer=filer__pb2.TransferLocksRequest.SerializeToString,
            response_deserializer=filer__pb2.TransferLocksResponse.FromString,
        )


class SeaweedFilerServicer(object):
    """////////////////////////////////////////////////"""

    def LookupDirectoryEntry(self, request, context):
        """
        Missing associated documentation comment in .proto file.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ListEntries(self, request, context):
        """
        Missing associated documentation comment in .proto file.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def CreateEntry(self, request, context):
        """
        Missing associated documentation comment in .proto file.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def UpdateEntry(self, request, context):
        """
        Missing associated documentation comment in .proto file.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def AppendToEntry(self, request, context):
        """
        Missing associated documentation comment in .proto file.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def DeleteEntry(self, request, context):
        """
        Missing associated documentation comment in .proto file.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def AtomicRenameEntry(self, request, context):
        """
        Missing associated documentation comment in .proto file.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def StreamRenameEntry(self, request, context):
        """
        Missing associated documentation comment in .proto file.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def AssignVolume(self, request, context):
        """
        Missing associated documentation comment in .proto file.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def LookupVolume(self, request, context):
        """
        Missing associated documentation comment in .proto file.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def CollectionList(self, request, context):
        """
        Missing associated documentation comment in .proto file.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def DeleteCollection(self, request, context):
        """
        Missing associated documentation comment in .proto file.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def Statistics(self, request, context):
        """
        Missing associated documentation comment in .proto file.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def Ping(self, request, context):
        """
        Missing associated documentation comment in .proto file.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetFilerConfiguration(self, request, context):
        """
        Missing associated documentation comment in .proto file.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def SubscribeMetadata(self, request, context):
        """
        Missing associated documentation comment in .proto file.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def SubscribeLocalMetadata(self, request, context):
        """
        Missing associated documentation comment in .proto file.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def KvGet(self, request, context):
        """
        Missing associated documentation comment in .proto file.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def KvPut(self, request, context):
        """
        Missing associated documentation comment in .proto file.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def CacheRemoteObjectToLocalCluster(self, request, context):
        """
        Missing associated documentation comment in .proto file.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def Lock(self, request, context):
        """
        Missing associated documentation comment in .proto file.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def Unlock(self, request, context):
        """
        Missing associated documentation comment in .proto file.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def TransferLocks(self, request, context):
        """
        Missing associated documentation comment in .proto file.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_SeaweedFilerServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "LookupDirectoryEntry": grpc.unary_unary_rpc_method_handler(
            servicer.LookupDirectoryEntry,
            request_deserializer=filer__pb2.LookupDirectoryEntryRequest.FromString,
            response_serializer=filer__pb2.LookupDirectoryEntryResponse.SerializeToString,
        ),
        "ListEntries": grpc.unary_stream_rpc_method_handler(
            servicer.ListEntries,
            request_deserializer=filer__pb2.ListEntriesRequest.FromString,
            response_serializer=filer__pb2.ListEntriesResponse.SerializeToString,
        ),
        "CreateEntry": grpc.unary_unary_rpc_method_handler(
            servicer.CreateEntry,
            request_deserializer=filer__pb2.CreateEntryRequest.FromString,
            response_serializer=filer__pb2.CreateEntryResponse.SerializeToString,
        ),
        "UpdateEntry": grpc.unary_unary_rpc_method_handler(
            servicer.UpdateEntry,
            request_deserializer=filer__pb2.UpdateEntryRequest.FromString,
            response_serializer=filer__pb2.UpdateEntryResponse.SerializeToString,
        ),
        "AppendToEntry": grpc.unary_unary_rpc_method_handler(
            servicer.AppendToEntry,
            request_deserializer=filer__pb2.AppendToEntryRequest.FromString,
            response_serializer=filer__pb2.AppendToEntryResponse.SerializeToString,
        ),
        "DeleteEntry": grpc.unary_unary_rpc_method_handler(
            servicer.DeleteEntry,
            request_deserializer=filer__pb2.DeleteEntryRequest.FromString,
            response_serializer=filer__pb2.DeleteEntryResponse.SerializeToString,
        ),
        "AtomicRenameEntry": grpc.unary_unary_rpc_method_handler(
            servicer.AtomicRenameEntry,
            request_deserializer=filer__pb2.AtomicRenameEntryRequest.FromString,
            response_serializer=filer__pb2.AtomicRenameEntryResponse.SerializeToString,
        ),
        "StreamRenameEntry": grpc.unary_stream_rpc_method_handler(
            servicer.StreamRenameEntry,
            request_deserializer=filer__pb2.StreamRenameEntryRequest.FromString,
            response_serializer=filer__pb2.StreamRenameEntryResponse.SerializeToString,
        ),
        "AssignVolume": grpc.unary_unary_rpc_method_handler(
            servicer.AssignVolume,
            request_deserializer=filer__pb2.AssignVolumeRequest.FromString,
            response_serializer=filer__pb2.AssignVolumeResponse.SerializeToString,
        ),
        "LookupVolume": grpc.unary_unary_rpc_method_handler(
            servicer.LookupVolume,
            request_deserializer=filer__pb2.LookupVolumeRequest.FromString,
            response_serializer=filer__pb2.LookupVolumeResponse.SerializeToString,
        ),
        "CollectionList": grpc.unary_unary_rpc_method_handler(
            servicer.CollectionList,
            request_deserializer=filer__pb2.CollectionListRequest.FromString,
            response_serializer=filer__pb2.CollectionListResponse.SerializeToString,
        ),
        "DeleteCollection": grpc.unary_unary_rpc_method_handler(
            servicer.DeleteCollection,
            request_deserializer=filer__pb2.DeleteCollectionRequest.FromString,
            response_serializer=filer__pb2.DeleteCollectionResponse.SerializeToString,
        ),
        "Statistics": grpc.unary_unary_rpc_method_handler(
            servicer.Statistics,
            request_deserializer=filer__pb2.StatisticsRequest.FromString,
            response_serializer=filer__pb2.StatisticsResponse.SerializeToString,
        ),
        "Ping": grpc.unary_unary_rpc_method_handler(
            servicer.Ping,
            request_deserializer=filer__pb2.PingRequest.FromString,
            response_serializer=filer__pb2.PingResponse.SerializeToString,
        ),
        "GetFilerConfiguration": grpc.unary_unary_rpc_method_handler(
            servicer.GetFilerConfiguration,
            request_deserializer=filer__pb2.GetFilerConfigurationRequest.FromString,
            response_serializer=filer__pb2.GetFilerConfigurationResponse.SerializeToString,
        ),
        "SubscribeMetadata": grpc.unary_stream_rpc_method_handler(
            servicer.SubscribeMetadata,
            request_deserializer=filer__pb2.SubscribeMetadataRequest.FromString,
            response_serializer=filer__pb2.SubscribeMetadataResponse.SerializeToString,
        ),
        "SubscribeLocalMetadata": grpc.unary_stream_rpc_method_handler(
            servicer.SubscribeLocalMetadata,
            request_deserializer=filer__pb2.SubscribeMetadataRequest.FromString,
            response_serializer=filer__pb2.SubscribeMetadataResponse.SerializeToString,
        ),
        "KvGet": grpc.unary_unary_rpc_method_handler(
            servicer.KvGet,
            request_deserializer=filer__pb2.KvGetRequest.FromString,
            response_serializer=filer__pb2.KvGetResponse.SerializeToString,
        ),
        "KvPut": grpc.unary_unary_rpc_method_handler(
            servicer.KvPut,
            request_deserializer=filer__pb2.KvPutRequest.FromString,
            response_serializer=filer__pb2.KvPutResponse.SerializeToString,
        ),
        "CacheRemoteObjectToLocalCluster": grpc.unary_unary_rpc_method_handler(
            servicer.CacheRemoteObjectToLocalCluster,
            request_deserializer=filer__pb2.CacheRemoteObjectToLocalClusterRequest.FromString,
            response_serializer=filer__pb2.CacheRemoteObjectToLocalClusterResponse.SerializeToString,
        ),
        "Lock": grpc.unary_unary_rpc_method_handler(
            servicer.Lock,
            request_deserializer=filer__pb2.LockRequest.FromString,
            response_serializer=filer__pb2.LockResponse.SerializeToString,
        ),
        "Unlock": grpc.unary_unary_rpc_method_handler(
            servicer.Unlock,
            request_deserializer=filer__pb2.UnlockRequest.FromString,
            response_serializer=filer__pb2.UnlockResponse.SerializeToString,
        ),
        "TransferLocks": grpc.unary_unary_rpc_method_handler(
            servicer.TransferLocks,
            request_deserializer=filer__pb2.TransferLocksRequest.FromString,
            response_serializer=filer__pb2.TransferLocksResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "filer_pb.SeaweedFiler", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class SeaweedFiler(object):
    """////////////////////////////////////////////////"""

    @staticmethod
    def LookupDirectoryEntry(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/filer_pb.SeaweedFiler/LookupDirectoryEntry",
            filer__pb2.LookupDirectoryEntryRequest.SerializeToString,
            filer__pb2.LookupDirectoryEntryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ListEntries(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/filer_pb.SeaweedFiler/ListEntries",
            filer__pb2.ListEntriesRequest.SerializeToString,
            filer__pb2.ListEntriesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def CreateEntry(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/filer_pb.SeaweedFiler/CreateEntry",
            filer__pb2.CreateEntryRequest.SerializeToString,
            filer__pb2.CreateEntryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def UpdateEntry(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/filer_pb.SeaweedFiler/UpdateEntry",
            filer__pb2.UpdateEntryRequest.SerializeToString,
            filer__pb2.UpdateEntryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def AppendToEntry(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/filer_pb.SeaweedFiler/AppendToEntry",
            filer__pb2.AppendToEntryRequest.SerializeToString,
            filer__pb2.AppendToEntryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def DeleteEntry(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/filer_pb.SeaweedFiler/DeleteEntry",
            filer__pb2.DeleteEntryRequest.SerializeToString,
            filer__pb2.DeleteEntryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def AtomicRenameEntry(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/filer_pb.SeaweedFiler/AtomicRenameEntry",
            filer__pb2.AtomicRenameEntryRequest.SerializeToString,
            filer__pb2.AtomicRenameEntryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def StreamRenameEntry(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/filer_pb.SeaweedFiler/StreamRenameEntry",
            filer__pb2.StreamRenameEntryRequest.SerializeToString,
            filer__pb2.StreamRenameEntryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def AssignVolume(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/filer_pb.SeaweedFiler/AssignVolume",
            filer__pb2.AssignVolumeRequest.SerializeToString,
            filer__pb2.AssignVolumeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def LookupVolume(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/filer_pb.SeaweedFiler/LookupVolume",
            filer__pb2.LookupVolumeRequest.SerializeToString,
            filer__pb2.LookupVolumeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def CollectionList(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/filer_pb.SeaweedFiler/CollectionList",
            filer__pb2.CollectionListRequest.SerializeToString,
            filer__pb2.CollectionListResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def DeleteCollection(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/filer_pb.SeaweedFiler/DeleteCollection",
            filer__pb2.DeleteCollectionRequest.SerializeToString,
            filer__pb2.DeleteCollectionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def Statistics(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/filer_pb.SeaweedFiler/Statistics",
            filer__pb2.StatisticsRequest.SerializeToString,
            filer__pb2.StatisticsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def Ping(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/filer_pb.SeaweedFiler/Ping",
            filer__pb2.PingRequest.SerializeToString,
            filer__pb2.PingResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetFilerConfiguration(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/filer_pb.SeaweedFiler/GetFilerConfiguration",
            filer__pb2.GetFilerConfigurationRequest.SerializeToString,
            filer__pb2.GetFilerConfigurationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def SubscribeMetadata(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/filer_pb.SeaweedFiler/SubscribeMetadata",
            filer__pb2.SubscribeMetadataRequest.SerializeToString,
            filer__pb2.SubscribeMetadataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def SubscribeLocalMetadata(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/filer_pb.SeaweedFiler/SubscribeLocalMetadata",
            filer__pb2.SubscribeMetadataRequest.SerializeToString,
            filer__pb2.SubscribeMetadataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def KvGet(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/filer_pb.SeaweedFiler/KvGet",
            filer__pb2.KvGetRequest.SerializeToString,
            filer__pb2.KvGetResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def KvPut(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/filer_pb.SeaweedFiler/KvPut",
            filer__pb2.KvPutRequest.SerializeToString,
            filer__pb2.KvPutResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def CacheRemoteObjectToLocalCluster(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/filer_pb.SeaweedFiler/CacheRemoteObjectToLocalCluster",
            filer__pb2.CacheRemoteObjectToLocalClusterRequest.SerializeToString,
            filer__pb2.CacheRemoteObjectToLocalClusterResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def Lock(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/filer_pb.SeaweedFiler/Lock",
            filer__pb2.LockRequest.SerializeToString,
            filer__pb2.LockResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def Unlock(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/filer_pb.SeaweedFiler/Unlock",
            filer__pb2.UnlockRequest.SerializeToString,
            filer__pb2.UnlockResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def TransferLocks(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/filer_pb.SeaweedFiler/TransferLocks",
            filer__pb2.TransferLocksRequest.SerializeToString,
            filer__pb2.TransferLocksResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
